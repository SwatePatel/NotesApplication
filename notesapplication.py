# -*- coding: utf-8 -*-
"""NotesApplication.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UAKG3E9umchrtB_CDKrY7fAYl_6C7may
"""

import json 
import os
from datetime import datetime

class Task:
    def __init__(self, title, priority='Normal', due_date=None):
        self.title = title
        self.priority = priority
        self.due_date = due_date
        self.completed = False

    def to_dict(self):
        return {
            'title': self.title,
            'priority': self.priority,
            'due_date': self.due_date,
            'completed': self.completed
        }

    @classmethod
    def from_dict(cls, task_dict):
        task = cls(
            title=task_dict['title'],
            priority=task_dict['priority'],
            due_date=task_dict['due_date']
        )
        task.completed = task_dict['completed']
        return task

class TodoList:
    def __init__(self, filename='todo_list.json'):
        self.filename = filename
        self.tasks = self.load_tasks()

    def load_tasks(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'r') as file:
                return [Task.from_dict(task) for task in json.load(file)]
        return []

    def save_tasks(self):
        with open(self.filename, 'w') as file:
            json.dump([task.to_dict() for task in self.tasks], file)

    def add_task(self, title, priority='Normal', due_date=None):
        task = Task(title, priority, due_date)
        self.tasks.append(task)
        self.save_tasks()
        print(f'Added task: "{title}" with priority "{priority}" and due date "{due_date}".')

    def view_tasks(self):
        if not self.tasks:
            print("No tasks in your to-do list.")
        else:
            print("\nYour To-Do List:")
            for idx, task in enumerate(self.tasks, 1):
                status = '✔️' if task.completed else '❌'
                due_date_str = task.due_date if task.due_date else 'No due date'
                print(f"{idx}. {task.title} (Priority: {task.priority}, Due: {due_date_str}) [{status}]")

    def remove_task(self, task_index):
        try:
            removed_task = self.tasks.pop(task_index - 1)
            self.save_tasks()
            print(f'Removed task: "{removed_task.title}"')
        except IndexError:
            print("Invalid task number.")

    def complete_task(self, task_index):
        try:
            self.tasks[task_index - 1].completed = True
            self.save_tasks()
            print(f'Marked task as completed: "{self.tasks[task_index - 1].title}"')
        except IndexError:
            print("Invalid task number.")

def main():
    todo_list = TodoList()

    while True:
        print("\nTo-Do List Application")
        print("1. Add Task")
        print("2. View Tasks")
        print("3. Remove Task")
        print("4. Complete Task")
        print("5. Exit")

        choice = input("Enter your choice (1-5): ")

        if choice == '1':
            title = input("Enter the task title: ")
            priority = input("Enter priority (Low/Normal/High): ").capitalize()
            due_date = input("Enter due date (YYYY-MM-DD) or leave blank: ")
            if due_date:
                try:
                    datetime.strptime(due_date, '%Y-%m-%d')  # Validate date format
                except ValueError:
                    print("Invalid date format. Please use YYYY-MM-DD.")
                    continue
            else:
                due_date = None

            todo_list.add_task(title, priority, due_date)
        elif choice == '2':
            todo_list.view_tasks()
        elif choice == '3':
            todo_list.view_tasks()
            task_index = int(input("Enter the task number to remove: "))
            todo_list.remove_task(task_index)
        elif choice == '4':
            todo_list.view_tasks()
            task_index = int(input("Enter the task number to mark as completed: "))
            todo_list.complete_task(task_index)
        elif choice == '5':
            print("Exiting the application.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == '__main__':
    main()
